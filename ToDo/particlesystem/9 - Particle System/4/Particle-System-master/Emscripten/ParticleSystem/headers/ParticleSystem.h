#pragma once

#include "ParticleEmitter.h"
#include "MagneticField.h"
#include "EventEmitter.h"
#include "Particle.h"
#include "Vector.h"
#include <vector>
#include <queue>

class ParticleSystem: public EventEmitter {

private:

	std::vector <Particle*>::const_iterator _pIt;
	std::vector <ParticleEmitter*> _emitters;
	std::vector <Particle*> _particles;
	std::queue <Particle*> _recycleBin;
	std::vector <Field*> _fields;

	int _emittedParticles;
	int _maxParticles;
  	Vector _dof;
   
public:

	///////////////////////////////////////////////////////////////////
	//
	//
	///////////////////////////////////////////////////////////////////
	ParticleSystem(int maxParticles);

	///////////////////////////////////////////////////////////////////
	//
	//
	///////////////////////////////////////////////////////////////////
	~ParticleSystem ();

	///////////////////////////////////////////////////////////////////
	//
	//
	///////////////////////////////////////////////////////////////////
	void setMaxParticles(int maxParticles);

	int getMaxParticles();

	///////////////////////////////////////////////////////////////////
	//
	//
	///////////////////////////////////////////////////////////////////
	void setDof(double x, double y, double z);

	///////////////////////////////////////////////////////////////////
	//
	//
	///////////////////////////////////////////////////////////////////
	void initParticleLoop();

	///////////////////////////////////////////////////////////////////
	//
	//
	///////////////////////////////////////////////////////////////////
	Particle* nextParticle();

	///////////////////////////////////////////////////////////////////
	// Returns object by id
	//
	///////////////////////////////////////////////////////////////////
	BaseObject* getObjectById(int id);

	///////////////////////////////////////////////////////////////////
	// Returns emitter by id
	//
	///////////////////////////////////////////////////////////////////
	ParticleEmitter* getEmitter(int id);

	///////////////////////////////////////////////////////////////////
	// Returns magnetic field by id
	//
	///////////////////////////////////////////////////////////////////
	MagneticField* getMagneticField(int id);

	///////////////////////////////////////////////////////////////////
	// clean up all objects and fire 'particle.destroy'
	// for each particle
	//
	///////////////////////////////////////////////////////////////////
	void destroy();

	///////////////////////////////////////////////////////////////////
	// Adds emitter object
	//
	///////////////////////////////////////////////////////////////////
	ParticleEmitter* addEmitter(int id);

	///////////////////////////////////////////////////////////////////
	// Adds magnetic field object
	//
	///////////////////////////////////////////////////////////////////
	MagneticField* addMagneticField(int id);

	///////////////////////////////////////////////////////////////////
	// updates simulation
	//
	///////////////////////////////////////////////////////////////////
	void step(double dt);

	///////////////////////////////////////////////////////////////////
	// add new particles step
	//
	///////////////////////////////////////////////////////////////////
	void addNewParticles(double dt);

	///////////////////////////////////////////////////////////////////
	// push a particle to recycle bin
	//
	///////////////////////////////////////////////////////////////////
	void pushRecycle(Particle* pParticle);

	///////////////////////////////////////////////////////////////////
	// pop a particle from recycle bin
	//
	///////////////////////////////////////////////////////////////////
	Particle* popRecycle();

	///////////////////////////////////////////////////////////////////
	// filter particles using lifeTime and event callback
	//
	///////////////////////////////////////////////////////////////////
	bool filterParticle(Particle* pParticle);

	///////////////////////////////////////////////////////////////////
	// filter particles step
	//
	///////////////////////////////////////////////////////////////////
	void filterParticles(double dt);
};